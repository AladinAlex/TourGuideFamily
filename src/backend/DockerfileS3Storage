# См. статью по ссылке https://aka.ms/customizecontainer, чтобы узнать как настроить контейнер отладки и как Visual Studio использует этот Dockerfile для создания образов для ускорения отладки.

# В зависимости от операционной системы хост-компьютеров, которые будут выполнять сборку контейнеров или запускать их, может потребоваться изменить образ, указанный в инструкции FROM.
# Дополнительные сведения см. на странице https://aka.ms/containercompat

# Этот этап используется при запуске из VS в быстром режиме (по умолчанию для конфигурации отладки)
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base
RUN apt-get update && apt-get install -y curl
WORKDIR /app
EXPOSE 80


# Этот этап используется для сборки проекта службы
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["s3/Storage.WebApi/Storage.WebApi.csproj", "s3/Storage.WebApi/"]
COPY ["s3/Storage.Bll/Storage.Bll.csproj", "s3/Storage.Bll/"]
COPY ["s3/Storage.GrpcContracts/Storage.GrpcContracts.csproj", "s3/Storage.GrpcContracts/"]
COPY ["./Directory.Build.props", "s3/"]
RUN dotnet restore "./s3/Storage.WebApi/Storage.WebApi.csproj"
COPY . .
WORKDIR "/src/s3/Storage.WebApi"
RUN dotnet build "./Storage.WebApi.csproj" -c %BUILD_CONFIGURATION% -o /app/build

# Этот этап используется для публикации проекта службы, который будет скопирован на последний этап
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./Storage.WebApi.csproj" -c %BUILD_CONFIGURATION% -o /app/publish /p:UseAppHost=false

# Этот этап используется в рабочей среде или при запуске из VS в обычном режиме (по умолчанию, когда конфигурация отладки не используется)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "Storage.WebApi.dll"]

#cd C:\dev\TourGuideFamily\src\backend
#docker build -t tour_storage:1.0.0 -f DockerfileS3Storage .
#docker run -d --name storage -p 5058:8080 -P tour_storage:1.0.0