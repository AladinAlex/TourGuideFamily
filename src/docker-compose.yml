version: '3.8'

services:

  # ========== БД (PostgreSQL) ==========
  postgres:
    image: postgres:16
    container_name: tourguide_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: aladin
      POSTGRES_DB: touristing
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    # command: -c log_statement=all
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d touristing"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - tourguide_net
  
  # ========== Сервис 1 (gRPC-клиент + БД) ==========
  main:
    build:
      context: ./backend
      dockerfile: DockerfileTourGuide
    container_name: tourguide_main
    ports:
      - "5000:80"  # HTTP-порт (REST API)
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DalOptions__PostgresConnectionString=Host=postgres;Database=touristing;Username=postgres;Password=aladin
      - Grpc__StorageUrl=http://storage:5001  # gRPC-адрес сервиса 2
    depends_on:
      postgres:
        condition: service_healthy
      storage:
        condition: service_healthy  # Ждём запуска (но не health-чека, т.к. gRPC)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - tourguide_net

  # ========== Сервис 2 (gRPC-сервер + работа с файлами) ==========
  storage:
    build:
      context: ./backend
      dockerfile: DockerfileS3Storage
    container_name: tourguide_storage
    ports:
      - "5001:5001"  # gRPC-порт
      - "5002:80"    # HTTP-порт (опционально)
    volumes:
      - uploaded_images:/Storage  # Папка для сохранения картинок
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - StoragePath=/Storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - tourguide_net

  # ========== Фронтенд (Nuxt.js SSR) ==========
  frontend:
    build:
      context: ./frontend/web.client
      dockerfile: Dockerfile
    container_name: tourguide_frontend
    ports:
      - "3000:3000"  # Порт Nuxt SSR
    environment:
      - API_BASE_URL=http://main:80  # API сервиса 1
    depends_on:
      main:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - tourguide_net

  pgadmin:
    image: dpage/pgadmin4
    container_name: tourguide_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: aladinsky_2001@mail.ru
      PGADMIN_DEFAULT_PASSWORD: aladin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - tourguide_net

volumes:
  postgres_data:
  uploaded_images:

networks:
  tourguide_net:
    driver: bridge
  
#docker-compose up -d --build